### server

# create a new server object
server = Server(SERVER_IP, PORT)

# let clients connect to the server
server.host()

# close off access to the quiz when enough players have joined
server.stopHosting()

# give the server a list of questions. (Python list of dictionaries)
server.setQuestionList([listOfDictionaries])

# add another question to the question list
server.addQuestion(dictionary)

# in the questions you can specify the key 'time' to specify how much time they have to answer it. (seconds)

# in the questions you can specify the key 'score' to specify how much score the question is worth. If it's not defined it will be 10 by default

# send the next question to the clients and collect the answers
server.handleNextQuestion()

# get the scores in the form of a dictionary.
server.getScores()

# get the scores in the form of a python list, sorted by points
server.getSortedScores()

	#sort a dictionary of scores
	sortedScores = server.sortScores(dictionary)
	#this will be a list

# send the scores to the clients
server.sendScores()

# in the case there's a chance the server hasn't received all the scores yet, you can use these.
# they pause the current thread untill all scores are in.
server.waitAndGetScores()
server.waitAndGetSortedScores()
server.waitAndSendScores()

# send json to all clients
server.sendToAll()

# variable that says if server is "ready". returns True or False
server.ready

# check if everyone has answered the latest question. returns True or False
server.everyoneAnswered()

# check if we're at the last question. returns True or False
server.lastQuestion()

# set the end message that will be send to clients when the quiz is ended
server.setEndMessage()

# end the quiz. Sends end message and final scores to the clients before closing the connection
server.endQuiz()


### client

# create a new client object
client = Client(SERVER_IP, PORT)

# join a server that is accepting clients
client.join()

# set name of the client. This is needed for the scoreboard
client.setName(string)

# await the next message from the server
client.listen()

# The last message the server sent
client.lastMessage

# ways to check if the server send a question:
if client.getQuestion() != None:
	#do what you would do if you got a question here

# get the question (string)
client.getQuestion()

# get the answer options (dict)
client.getQuestionOptions()

# get how much score the question is worth
client.getQuestionScore()

# answer a question. (for now a string. Just a, b, c or d)
client.answer(option)

# check how much time there is to answer it (seconds)
client.getTimer()

# if the user didn't answer in time. Simply answer for them.
client.answer("out of time")
client.answer(None)
client.answer(False)
#any of the above will do

# ways to check if the server send scores:
if client.getScores() != None:
	#do what you would do if you got scores here

# get your own score:
client.getYourScore()

#get sorted list of all scores:
client.getScores()

# get the solution to the last question that was send (is available when the scores are send)
client.getSolution()

# check if the server has ended the quiz. False or True
client.ended

# get the end message.
client.getEndMessage()

#end quiz. This closes the connection
client.end()
